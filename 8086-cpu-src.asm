
; You may customize this and other start-up templates; 
; The location of this template is c:\emu8086\inc\0_com_template.txt

;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   周一 4月 27 2020
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================


CODE SEGMENT
assume cs:CODE,ds:CODE,ss:stack

START:
    mov ax,CODE
    mov ds,ax
    mov ss,ax
    mov ax,sta_length
    mov sp,ax
    
	call init_TIME_8255A
	call init_8259A
	call init_TIME_8253A
	call setup_int_60
	call init_COM
	; 这里的sti必须打开才能相应int
	sti
	; get time
	show:  
	call show_time
	;call check_pc
	jmp show
	hlt 

; char -> com -> esp8266
send_com_ch macro cha
    push dx
    push ax
    mov dx,COM_PORT_8251A_DATA
    mov al,cha
    out dx,al
    pop ax
    pop dx
send_com_ch endm

;初始化串口
init_COM proc  
    MOV   DX, COM_PORT_8251A_CONTROL
    MOV   AL, 01001101b   ;写模式字  1停止位,无校验,8数据位, x1
    OUT   DX, AL
    nop 
    MOV   AL, 00010101b   ;控制字 清出错标志, 允许发送接收
    OUT   DX, AL    
    ret    
init_COM endp


; interrupt 80h
setup_int_60 proc
    push ax
    push cx
    push es
    push ds
    push si
    push di
    
	mov ax, 0
	mov es, ax
	mov ax, cs
	mov ds, ax
	mov si, offset int_60_service 
	mov di, 200h
	mov cx, offset int_60_end - int_60_service
	cld
	rep movsb
	;把中断例程入口放入中断向量表中的30h位置
	mov word ptr es:[60h * 4], 200h ;
	mov word ptr es:[60h * 4 + 2], 0
	
	pop di
	pop si
	pop ds
	pop es
	pop cx
	pop ax

ret 
setup_int_60 endp


; 增加时间
add_time macro
    LOCAL check_s_1, check_s_2,check_m_2,check_m_1,check_h_2,re_h,end 
    push ax
    push bx
    push dx
    ; 检查秒
    check_s_1:
    lea bx,led_sec
    ; al <- 秒的个位
    mov al,ds:[bx]+1
    cmp al,8
    ja check_s_2
    inc al
    mov ds:[bx]+1,al
    jmp end
    check_s_2:
    mov ds:[bx]+1,0
    ; 有一位进位, al <- 秒的十位
    mov al,ds:[bx]
    cmp al,4
    ja check_m_2
    inc al
    mov ds:[bx],al
jmp end
    check_m_2:
    ; 进一分钟，al <- 分的个位
    mov ds:[bx],0
    lea bx,led_min
    mov al,ds:[bx]+1
    cmp al,8
    ja check_m_1
    inc al
    mov ds:[bx]+1,al
jmp end
    check_m_1:
    mov ds:[bx]+1,0
    ; 进十分钟，al <- 分的十位
    mov al,ds:[bx]
    cmp al,4
    ja check_h_2
    inc al
    mov ds:[bx],al
jmp end
    check_h_2:
    ; 进一个小时，
    ; 通知ESP8266准备刷新
    send_com_ch COM_REFRESH_WEATHER_CH
    ;
    mov ds:[bx],0
    lea bx,led_hour
    mov al,ds[bx]
    mov dl,10
    mul dl
    add al,ds[bx]+1
    inc al
    cmp al,24
    jne re_h
    mov ds:[bx],0
    mov ds:[bx]+1,0
jmp end
    re_h: ; 换回小时两位数
    xor ah,ah
    mov dl,10
    div dl
    mov ds:[bx],al
    mov ds:[bx]+1,ah
    end:
    pop dx
    pop bx
    pop ax        
add_time endm

; int 30h service code,add 1 sec
int_60_service:
    cli
    add_time
    sti     
    iret
int_60_end:
    nop
    
; 30-37H
init_8259A proc
    push dx
    push ax
    mov dx,INT_8259A_PORT_0
    mov al,INT_8259A_ICW1 ; ICW1,high trigger, single chip, icw4
    out dx,al
    nop
    mov dx,INT_8259A_PORT_1
    mov al,INT_8259A_ICW2 ;ICW2,IR0,60H
    out dx,al
    nop
    mov al,INT_8259A_ICW4 ;ICW4,自动EOI
    out dx,al
    nop
    mov al,INT_8259A_OCW1;OCW1
    out dx,al
    pop ax
    pop dx
    ret
init_8259A endp

; 初始化时间8255A
init_TIME_8255A  proc
mov dx,TIME_PORT_8255_CONFIG
mov al,10001001B
out dx,al
mov dx,TIME_PORT_8255_B
ret
init_TIME_8255A  endp

; 初始化，输出1s的脉冲
init_TIME_8253A proc
    
mov dx,TIME_PORT_8253_CONFIG
mov al,00110110B ;0号，低高，方式3，二进制
out dx,al
mov dx,TIME_PORT_8253_A
mov ax,1000
out dx,al
mov al,ah
out dx,al

mov dx,TIME_PORT_8253_CONFIG
mov al,01110110B ;1号，低高，方式3，二进制
out dx,al
mov dx,TIME_PORT_8253_B
mov ax,1000
out dx,al
mov al,ah
out dx,al

ret
init_TIME_8253A endp

; 检查8255 PC输入
check_pc proc
    push ax
    push bx
    push dx
    pushf
    check_pc_1:
    mov dx,TIME_PORT_8255_C
    in al,dx
    test al,00000001B
    jz check_pc_2
    ; PC0 pressed
    lea bx,led_mode
    mov al,ds:[bx]
    xor al,1
    mov ds:[bx],al
    check_pc_2:

    pop dx
    pop bx
    pop ax 
    ret    
check_pc endp
	
; 显示时间到显示屏上
show_time proc
	push cx
	push bx
	push ax
	push dx
	; 判断是否需要显示
	lea bx,led_mode
	mov al,ds:[bx]
	cmp al,LED_POWERSAVE
	jne show_time_start
	jmp show_time_end
show_time_start:	
    mov cx,6         
show_time_again:
	mov bx,cx
	dec bx
	mov al,1
	push cx
	mov cl,bl
	shl al,cl
	pop cx
	mov dx,TIME_PORT_8255_B ; 选中显示位
	out dx,al
	mov dx,TIME_PORT_8255_A ;显示数据
	mov bl,led_hour[bx]
	xor bh,0
	mov al,num_seg[bx]
	out dx,al
	call delay
	loop show_time_again
show_time_end:
	pop dx
	pop ax
	pop bx
	pop cx
    ret 
show_time endp

delay proc
    push cx
    mov cx,127
    loop $
    pop cx     
    ret
delay endp

; 获取时间
get_time proc
	;mov ah,2ch ;读取系统时间,好像proteus不能用
	;CH：CL--时：分 DH：DL--秒：百分秒
	;int 21h
	MOV BX ,OFFSET led_hour
	MOV AL,CH
	CALL C16_10 ;转换AL中16进制为10进制,并填入相应位置
	MOV BX ,OFFSET led_min
	MOV AL,CL ;分
	CALL C16_10
	MOV BX ,OFFSET led_sec
	MOV AL,DH ;秒
	CALL C16_10
ret
get_time endp

;将AL中的16进制转为10进制(仅为分离)
C16_10 PROC
	PUSH CX 
	MOV AH,0
	MOV CX,10D
	DIV CL
	;ADD AX,3030H
	MOV [BX],AL
	INC BX
	MOV [BX],AH
	POP CX
	RET
C16_10 ENDP

; data

; data start
TIME_PORT_8255_A EQU 0010H
TIME_PORT_8255_B EQU 0012H
TIME_PORT_8255_C EQU 0014H
TIME_PORT_8255_CONFIG EQU 0016H

TIME_PORT_8253_A EQU 0018H
TIME_PORT_8253_B EQU 001AH
TIME_PORT_8253_C EQU 001CH
TIME_PORT_8253_CONFIG EQU 001EH

INT_8259A_PORT_0 EQU 0000H
INT_8259A_PORT_1 EQU 0002H

INT_8259A_ICW1 EQU 00010011B ; ICW1,high trigger, single chip, icw4
INT_8259A_ICW2 EQU 01100000B ;ICW2,IR0,60H
INT_8259A_ICW4 EQU 00000011B ; auto EOI
INT_8259A_OCW1 EQU 00000000B

COM_PORT_8251A_DATA EQU 0008H
COM_PORT_8251A_CONTROL EQU 000AH

COM_REFRESH_WEATHER_CH EQU 'R' 
COM_NEXT_WEATHER_CH EQU 'N'

LED_POWERSAVE EQU 00H
LED_NORMOL EQU 01H          
           
num_seg db 0C0H,0F9H,0A4H,0B0H,99H,92H,82H,0F8H,80H,90H; 0-9
   
led_hour db 1,3
led_min db 5,9
led_sec db 5,5
led_mode db 01h ;省电模式00，显示模式01
; data end

CODE    ENDS

stack segment 'stack'

sta dw 128 dup(0)
sta_length EQU $
    
stack ends


END START








