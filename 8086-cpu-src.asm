
; You may customize this and other start-up templates; 
; The location of this template is c:\emu8086\inc\0_com_template.txt

;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   ?üò? 4?? 27 2020
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================


CODE SEGMENT
assume cs:CODE,ds:data,ss:stack

START:
    mov ax,data
    mov ds,ax
	mov ax,stack
    mov ss,ax
    mov ax,sta_length
    mov sp,ax

    call init_TIME_8255A
	call init_BUZZER_8255A
	call init_TIME_8253A
	call setup_int_60
	call init_COM
    call init_8259A
	; enable INTerrupt
	sti
	; get time
	show:  
	call show_time
	call check_time_pc
	call check_buzzer_time_pc
	call check_sound
	call output_light
	;call check_weather
	jmp show
	hlt 

; char -> com -> esp8266
send_com_ch macro cha
    push dx
    push ax
    mov dx,COM_PORT_8251A_DATA
    mov al,cha
    out dx,al
    pop ax
    pop dx
endm
; 跑马灯
output_light proc
	push dx
	push ax
	cmp led_mode,00H
	jne light_on
	;light off
	mov dx,BUZZER_PORT_8255_A
	mov al,0
	out dx,al
	jmp output_light_end
	light_on:
	mov dx,BUZZER_PORT_8255_A
	mov al,light_values
	out dx,al
	output_light_end:
	pop ax
	pop dx
	ret
output_light endp

; COM指令
check_buzzer_time_pc proc
	push dx
	push ax
	
mov cx,0

check_buzzer_time_pc5:
	mov dx,BUZZER_PORT_8255_C
	in al,dx
	; 3-0位为输出，为0
	or al,0FH
	not al
	and al,00100000B
	je check_buzzer_time_pc5_end
	mov cx,1
	jmp check_buzzer_time_pc5
check_buzzer_time_pc5_end:
	cmp cx,1
	jne check_buzzer_time_pc7
	send_com_ch 'R'
	
mov cx,0
; 翻页
check_buzzer_time_pc7:
	mov dx,BUZZER_PORT_8255_C
	in al,dx
	; 3-0位为输出，为0
	or al,0FH
	not al
	and al,10000000B
	je check_buzzer_time_pc7_end
	mov cx,1
	jmp check_buzzer_time_pc7
check_buzzer_time_pc7_end:
	cmp cx,1
	jne check_buzzer_time_pc_end
	send_com_ch 'N'

check_buzzer_time_pc_end:
	pop ax
	pop dx
	ret
check_buzzer_time_pc endp


; 检查声音
check_sound proc
	push ax
	push bx
	push dx
	lea bx,clock_sounded
	mov al,ds:[bx]
	mov dx,BUZZER_PORT_8255_C
	cmp al,0
	je no_sound
	; trigget sound
	mov al,00000001B
	out dx,al
	jmp check_sound_end
	no_sound:
	mov al,00000000B
	out dx,al
	check_sound_end:
	pop dx
	pop bx
	pop ax
		
	ret
check_sound endp

;3?ê??ˉ′??ú
init_COM proc  
    MOV   DX, COM_PORT_8251A_CONTROL
    MOV   AL, 01001101b   ;D′?￡ê?×?  1í￡?1??,?TD￡?é,8êy?Y??, x1
    OUT   DX, AL
    nop 
    MOV   AL, 00010101b   ;????×? ??3?′í±ê??, ?êDí・￠?í?óê?
    OUT   DX, AL    
    ret    
init_COM endp



; interrupt 80h
setup_int_60 proc
    push ax
    push cx
    push es
    push ds
    push si
    push di
    
	mov ax, 0
	mov es, ax
	mov ax, cs
	mov ds, ax
	mov si, offset int_60_service 
	mov di, 200h
	mov cx, offset int_60_end - int_60_service
	cld
	rep movsb
	;°??D??ày3ìè??ú・?è??D???òá?±í?Dμ?30h????
	mov word ptr es:[60h * 4], 200h ;
	mov word ptr es:[60h * 4 + 2], 0
	
	pop di
	pop si
	pop ds
	pop es
	pop cx
	pop ax

ret 
setup_int_60 endp


; 秒+1
add_time proc far
    ;LOCAL check_s_1, check_s_2,check_m_2,check_m_1,check_h_2,re_h,end 
    push ax
    push bx
    push dx
	push cx
	mov cx,0
    check_s_1:
    lea bx,led_sec
    ; al <- second
    mov al,ds:[bx]+1
    cmp al,8
    ja check_s_2
    inc al
    mov ds:[bx]+1,al
jmp add_time_end
    check_s_2:
    mov byte ptr ds:[bx]+1,00H
    ; óDò???????, al <- ??μ?ê???
    mov al,ds:[bx]
    cmp al,4
    ja check_m_2
    inc al
    mov ds:[bx],al
jmp add_time_end
    check_m_2:
    ; ??ò?・??ó￡?al <- ・?μ?????
    mov byte ptr ds:[bx],0
    lea bx,led_min
    mov al,ds:[bx]+1
    cmp al,8
    ja check_m_1
    inc al
    mov ds:[bx]+1,al
jmp add_time_end
    check_m_1:
    mov byte ptr ds:[bx]+1,0
    ; ??ê?・??ó￡?al <- ・?μ?ê???
    mov al,ds:[bx]
    cmp al,4
    ja check_h_2
    inc al
    mov ds:[bx],al
jmp add_time_end
    check_h_2:
    ; 进位
    ; í¨?aESP8266×?±??￠D?
    send_com_ch COM_REFRESH_WEATHER_CH
	; 报时
	mov cx,1
    ;
    mov byte ptr ds:[bx],00H
    lea bx,led_hour
    mov al,byte ptr ds:[bx]
    mov dl,10
    mul dl
    add al,byte ptr ds:[bx]+1
    inc al
    cmp al,24
    jne re_h
    mov byte ptr ds:[bx],0
    mov byte ptr ds:[bx]+1,0
jmp add_time_end
    re_h: ; ????D?ê±á???êy
    xor ah,ah
    mov dl,10
    div dl
    mov ds:[bx],al
    mov ds:[bx]+1,ah
    add_time_end:
	; 增加结束，检查闹铃
	call check_should_clock_ring
	mov al,light_values
	rol al,1
	mov light_values,al
	cmp cx,1
	je open_hour_sound;要响铃
	; 不响铃
	mov dx,BUZZER_PORT_8255_B
	mov al,00000000B
	out dx,al
	jmp open_hour_sound_end
open_hour_sound:	
	; 响铃
	mov dx,BUZZER_PORT_8255_B
	mov al,00000100B
	out dx,al
open_hour_sound_end:
	pop cx
    pop dx
    pop bx
    pop ax
	retf
add_time endp

; 检查闹铃是否需要触发
check_should_clock_ring proc
	push si
	push di
	push ax
	push bx
	push cx

	lea si,led_hour
	lea di,clock_hour
	mov cx,6
compare_time:
	mov al,ds:[si]
	cmp al,byte ptr ds:[di]
	jne check_should_clock_ring_end
	inc si
	inc di
	loop compare_time
; 时间一样，若闹钟已开启，则触发闹铃
	lea bx,clock_enabled
	mov al,ds:[bx]
	cmp al,0
	je check_should_clock_ring_end
	mov al,01H
	lea bx,clock_sounded
	mov ds:[bx],al
	check_should_clock_ring_end:
	pop cx
	pop bx
	pop ax
	pop di
	pop si
	ret
check_should_clock_ring endp

; int 30h service code,add 1 sec
int_60_service:
    cli
    call far ptr add_time
    sti     
    iret
int_60_end:
    nop
    
; 30-37H
init_8259A proc
    push dx
    push ax
    mov dx,INT_8259A_PORT_0
    mov al,INT_8259A_ICW1 ; ICW1,high trigger, single chip, icw4
    out dx,al
    mov dx,INT_8259A_PORT_1
    mov al,INT_8259A_ICW2 ;ICW2,IR0,60H
    out dx,al
    mov al,INT_8259A_ICW4 ;ICW4,×??ˉEOI
    out dx,al
    mov al,INT_8259A_OCW1;OCW1
    out dx,al
    pop ax
    pop dx
    ret
init_8259A endp

; init time 8255A
init_TIME_8255A  proc
	mov dx,TIME_PORT_8255_CONFIG
	mov al,10001001B
	out dx,al
	mov dx,TIME_PORT_8255_B
	ret
init_TIME_8255A  endp

; init BUZZER
init_BUZZER_8255A  proc
	mov dx,BUZZER_PORT_8255_CONFIG
	mov al,10001000B ;
	out dx,al
	ret
init_BUZZER_8255A  endp

; 3?ê??ˉ￡?ê?3?1sμ???3?
init_TIME_8253A proc
    
mov dx,TIME_PORT_8253_CONFIG
mov al,00110110B ;0号reg,低高，方式3，二进制
out dx,al
mov dx,TIME_PORT_8253_A
mov ax,1000
out dx,al
mov al,ah
out dx,al

mov dx,TIME_PORT_8253_CONFIG
mov al,01110110B ;1号reg,低高，方式3，二进制
out dx,al
mov dx,TIME_PORT_8253_B
mov ax,1000
out dx,al
mov al,ah
out dx,al

ret
init_TIME_8253A endp


change_time_led_mode proc
	push dx
	push bx
	push ax
	; switch to the other mode
	lea bx,led_mode
    mov al,ds:[bx]
    xor al,1
    mov ds:[bx],al
	mov dx,TIME_PORT_8255_B
	mov al,0
	out dx,al
	pop ax
	pop bx
	pop dx
	ret
change_time_led_mode endp

; 显示时间或时钟（更改模式）
show_time_or_clock proc
	push ax
	push di
	lea di,led_time_clock
	mov al,ds:[di]
	xor al,1
	mov ds:[di],al
	pop di
	pop ax
	ret
show_time_or_clock endp

; 贪睡
clock_sleepy proc
	push si
	push di
	push ax
	push bx
	lea si,led_hour
	lea di,clock_hour
	mov cx,6
	mov_time:
	mov al,ds:[si]
	mov ds:[di],al
	inc si
	inc di
	loop mov_time
	mov cx,5
	add_5_mins:
	;int 3h
	lea bx,clock_min
	call inc_min
	lea bx,clock_min
	mov al,ds:[bx]
	cmp al,0
	je check_next
	jmp add_5_mins_end
	check_next:
	mov al,ds:[bx]+1
	cmp al,0
	je add_a_hour
	jmp add_5_mins_end
	add_a_hour:
	lea bx,clock_hour
	call inc_hour
	add_5_mins_end:
	loop add_5_mins
	; close sound
	lea bx,clock_sounded
	mov al,00H
	mov ds:[bx],al
clock_sleepy_end:
	pop bx
	pop ax
	pop di
	pop si
	ret
clock_sleepy endp

; enable/disbale clock
change_clock_status proc
	push bx
	push ax
	lea bx,clock_enabled
	mov al,ds:[bx]
	xor al,1
	mov ds:[bx],al
	xor al,1
	; 如果是响铃状态+开启状态，则先关闭闹钟声音
	cmp al,1
	je change_clock_status_check_sound
	jmp change_clock_status_end
	change_clock_status_check_sound:
	lea bx,clock_sounded
	mov al,ds:[bx]
	cmp al,1
	je shutdown_clock
	jmp change_clock_status_end
	shutdown_clock:
	lea bx,clock_sounded
	mov al,00H
	mov ds:[bx],al
	change_clock_status_end:
	pop ax
	pop bx
	ret
change_clock_status endp

; TIME_8255_PC
check_time_pc proc
    push ax
    push bx
    push dx
	push cx
	push di
    mov dx,TIME_PORT_8255_C
	mov cx,0

check_time_pc0:
    in al,dx
	not al
    and al,00000001B
	cmp al,0
    je check_time_pc0_end
    ; PC0 pressed
	mov cx,1
	jmp check_time_pc0
check_time_pc0_end:
	cmp cx,1
	jne check_time_pc1
	;oper
    call change_time_led_mode

mov cx,0

; clock/time
check_time_pc1:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,00000010B
	cmp al,0
	je check_time_pc1_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc1
check_time_pc1_end:
	cmp cx,1
	jne check_time_pc2
	lea bx,clock_hour
	call show_time_or_clock
mov cx,0
; enable/disable clock
check_time_pc2:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,00000100B
	cmp al,0
	je check_time_pc2_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc2
check_time_pc2_end:
	cmp cx,1
	jne check_time_pc3
	lea bx,clock_hour
	call change_clock_status

mov cx,0

check_time_pc3:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,00001000B
	cmp al,0
	je check_time_pc3_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc3
check_time_pc3_end:
	cmp cx,1
	jne check_time_pc4
	lea bx,clock_hour
	call inc_hour

mov cx,0

; 5分钟
check_time_pc4:	
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,00010000B
	cmp al,0
	je check_time_pc4_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc4
check_time_pc4_end:
	cmp cx,1
	jne check_time_pc5
	mov cx,5
	inc_5_mins:
	lea bx,clock_min
	call inc_min
	loop inc_5_mins

mov cx,0

check_time_pc5:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,00100000B
	cmp al,0
	je check_time_pc5_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc5
check_time_pc5_end:
	cmp cx,1
	jne check_time_pc6
	lea bx,clock_hour
	call clock_sleepy

mov cx,0

; hour +=1
check_time_pc6:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,01000000B
	cmp al,0
	je check_time_pc6_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc6
check_time_pc6_end:
	cmp cx,1
	jne check_time_pc7
	lea bx,clock_hour
	cli
	lea bx,led_hour 
	call inc_hour
	sti

mov cx,0

; hour +=1
check_time_pc7:
	in al,dx
	not al
	; al保存着状态，1表示按下
	and al,10000000B
	cmp al,0
	je check_time_pc7_end
	; clock : hour + 1
	mov cx,1
	jmp check_time_pc7
check_time_pc7_end:
	cmp cx,1
	jne check_time_end
	lea bx,clock_hour
	cli
	lea bx,led_min 
	call inc_min
	sti

check_time_end:
	pop di
	pop cx
    pop dx
    pop bx
    pop ax 
    ret    
check_time_pc endp

; hour += 1
; bx -> hour	
inc_hour proc
	push ax
	push bx
	; al <- decimal numbers
	xor ah,ah
	mov al,ds:[bx]
	push bx
	mov bl,10
	mul bl
	pop bx
	add al,ds:[bx]+1
	inc al
	cmp al,24
	jne inc_hour_end
	mov al,0
inc_hour_end:
	; decimal -> [bx]
	push bx
	mov bl,10
	div bl
	pop bx
	mov ds:[bx],al
	mov ds:[bx]+1,ah
	pop bx
	pop ax
	ret
inc_hour endp

; bx -> min
inc_min proc 
	push ax
	push bx
	; al <- decimal numbers
	xor ah,ah
	mov al,ds:[bx]
	push bx
	mov bl,10
	mul bl
	pop bx
	add al,ds:[bx]+1
	inc al
	cmp al,60
	jne inc_min_end
	mov al,0
inc_min_end:
	; decimal -> [bx]
	push bx
	mov bl,10
	div bl
	pop bx
	mov ds:[bx],al
	mov ds:[bx]+1,ah
	pop bx
	pop ax
	ret
inc_min endp

; ??ê?ê±??μ???ê??áé?
show_time proc
	push cx
	push bx
	push ax
	push dx
	; ?D??ê?・?Dèòa??ê?
	lea bx,led_mode
	mov al,ds:[bx]
	cmp al,LED_POWERSAVE
	jne judge_mode
	;int 3h
	jmp show_time_end
judge_mode:
	; 判断模式
	lea bx,led_time_clock
	mov al,[bx]
	cmp al,LED_TIME_MODE ;00H
	je time_mode
clock_mode:
	;int 3h
	lea bx,clock_hour
	jmp show_time_start
time_mode:
	lea bx,led_hour
; bx 初始为小时
show_time_start:
    mov cx,6         
show_time_again:
	mov di,cx
	dec di
	mov al,1
	push cx
	mov cx,di
	shl al,cl
	pop cx
	mov dx,TIME_PORT_8255_B ; ???D??ê???
	push bx
	mov bl,clock_enabled
	cmp bl,0
	jz check_time_clock
	; clock enabled
	or al,01000000B
	; show time enable
	check_time_clock:
	mov bl,led_time_clock
	cmp bl,0
	jz cont
	;int 3h
	or al,10000000B
	cont:
	pop bx
	out dx,al
	mov dx,TIME_PORT_8255_A ;??ê?êy?Y
	push bx
	xor bh,bh
	mov bl,ds:[bx+di]
	mov al,num_seg[bx]
	out dx,al
	pop bx
	call delay
	loop show_time_again
show_time_end:
	pop dx
	pop ax
	pop bx
	pop cx
    ret 
show_time endp

delay proc
    push cx
    mov cx,127
    loop $
    pop cx     
    ret
delay endp

; ??è?ê±??
get_time proc
	MOV BX ,OFFSET led_hour
	MOV AL,CH
	CALL C16_10 ;
	MOV BX ,OFFSET led_min
	MOV AL,CL ;・?
	CALL C16_10
	MOV BX ,OFFSET led_sec
	MOV AL,DH ;??
	CALL C16_10
ret
get_time endp

;【BX】16进制转换成10进制
C16_10 PROC
	PUSH CX 
	push ax
	push bx

	MOV AH,0
	MOV CX,10
	DIV CL
	;ADD AX,3030H
	MOV [BX],AL
	INC BX
	MOV [BX],AH

	pop bx
	pop ax
	POP CX
	RET
C16_10 ENDP

; data



CODE ENDS

data segment 

; data start
TIME_PORT_8255_A EQU 0010H
TIME_PORT_8255_B EQU 0012H
TIME_PORT_8255_C EQU 0014H
TIME_PORT_8255_CONFIG EQU 0016H

BUZZER_PORT_8255_A EQU 0020H
BUZZER_PORT_8255_B EQU 0022H
BUZZER_PORT_8255_C EQU 0024H
BUZZER_PORT_8255_CONFIG EQU 0026H

TIME_PORT_8253_A EQU 0018H
TIME_PORT_8253_B EQU 001AH
TIME_PORT_8253_C EQU 001CH
TIME_PORT_8253_CONFIG EQU 001EH

INT_8259A_PORT_0 EQU 0000H
INT_8259A_PORT_1 EQU 0002H

INT_8259A_ICW1 EQU 00010011B ; ICW1,high trigger, single chip, icw4
INT_8259A_ICW2 EQU 01100000B ;ICW2,IR0,60H
INT_8259A_ICW4 EQU 00000011B ; auto EOI
INT_8259A_OCW1 EQU 00000000B

COM_PORT_8251A_DATA EQU 0008H
COM_PORT_8251A_CONTROL EQU 000AH

COM_REFRESH_WEATHER_CH EQU 'R' 
COM_NEXT_WEATHER_CH EQU 'N'

LED_POWERSAVE EQU 00H
LED_NORMOL EQU 01H

LED_TIME_MODE EQU 00H
LED_CLOCK_MODE EQU 01H        

num_seg db 0C0H,0F9H,0A4H,0B0H,99H,92H,82H,0F8H,80H,90H; 0-9

led_hour db 1,3
led_min db 5,9
led_sec db 5,5

clock_hour db 0,6
clock_min db 0,0
clock_sec db 0,0

led_mode db 01h ;00省电模式，01显示模式
led_time_clock db 00H; 00H显示时间，01H显示闹钟设置
clock_enabled db 00H ; 00H闹钟未开启，01H闹钟开启
clock_sounded db 00H ;00H闹钟不响铃，01H闹钟响铃
hour_sounded db 00H ;00H报时不响，01H报时铃响

light_values db 00000111B ;跑马灯

; data end

data ends

stack segment 'stack'

sta dw 256 dup(0)
sta_length EQU $
    
stack ends


END START


